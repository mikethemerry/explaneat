"""add split_size for dataset splits

Revision ID: 6e5253aa850f
Revises: 21e13b6a12b4
Create Date: 2025-02-19 23:40:21.414198

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = '6e5253aa850f'
down_revision = '21e13b6a12b4'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('dataset_column')
    op.drop_table('dataset')
    op.drop_table('dataset_split')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dataset_split',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('dataset_id', sa.INTEGER(), nullable=False),
    sa.Column('split_type', sa.VARCHAR(length=50), nullable=False),
    sa.Column('seed', sa.INTEGER(), nullable=False),
    sa.Column('features_blob', sa.BLOB(), nullable=False),
    sa.Column('targets_blob', sa.BLOB(), nullable=False),
    sa.Column('created_at', sa.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], ['dataset.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dataset',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), nullable=False),
    sa.Column('source', sa.VARCHAR(length=50), nullable=False),
    sa.Column('version', sa.VARCHAR(length=50), nullable=False),
    sa.Column('created_at', sa.DATETIME(), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), nullable=True),
    sa.Column('n_samples', sa.INTEGER(), nullable=False),
    sa.Column('n_features', sa.INTEGER(), nullable=False),
    sa.Column('n_classes', sa.INTEGER(), nullable=True),
    sa.Column('feature_types', sqlite.JSON(), nullable=False),
    sa.Column('task_type', sa.VARCHAR(length=50), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('paper_url', sa.VARCHAR(length=500), nullable=True),
    sa.Column('data_url', sa.VARCHAR(length=500), nullable=False),
    sa.Column('missing_values', sa.BOOLEAN(), nullable=True),
    sa.Column('features_blob', sa.BLOB(), nullable=False),
    sa.Column('targets_blob', sa.BLOB(), nullable=False),
    sa.Column('data_format', sa.VARCHAR(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dataset_column',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('dataset_id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), nullable=False),
    sa.Column('data_type', sa.VARCHAR(length=50), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('units', sa.VARCHAR(length=50), nullable=True),
    sa.Column('min_value', sa.FLOAT(), nullable=True),
    sa.Column('max_value', sa.FLOAT(), nullable=True),
    sa.Column('categories', sqlite.JSON(), nullable=True),
    sa.Column('missing_count', sa.INTEGER(), nullable=True),
    sa.Column('unique_count', sa.INTEGER(), nullable=True),
    sa.Column('mean', sa.FLOAT(), nullable=True),
    sa.Column('std', sa.FLOAT(), nullable=True),
    sa.Column('median', sa.FLOAT(), nullable=True),
    sa.Column('is_target', sa.BOOLEAN(), nullable=True),
    sa.Column('ordinal_position', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['dataset_id'], ['dataset.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
